                 #######################################
                 #  How To Generate API Documentation  #
                 #          For The Manual             #
                 #         From The Source             #
                 #######################################

I - Introduction

The Structures_DataGrid and Structures_DataGrid_Column API documentation in the 
PEAR manual is generated from :
- doc blocks in the source
- examples in the docs/examples/ folder that are linked into the doc blocks with @example tags

To add explanation, description, etc... to a method entry in the manual, just add 
comments in its doc block in the source.

To add an example to a given method, add a tag to its doc block like :
@example    my-example.php      My Example

And then create a file named my-example.php in the docs/examples/ directory

II - Generate the documentation

Note: This has been tested on Linux with PhpDocumentor 1.3.0RC6

1 - Change your current directory to the Structures_DataGrid root directory 
(where you checked it out from CVS)

2 - run tools/manual-gen/mkmanual.sh <peardoc_path> 

Where peardoc_path is the CVS PEAR manual root (where you have checked out the 
whole PEAR manual source)

This will 
    - build the documentation with phpDocumentor, merging the examples files
    - copy (replace) the newly generated files into the pear manual file tree

It will only modify the files in : 
- en/package/structures/structures-datagrid/structures-datagrid/
- en/package/structures/structures-datagrid/structures-datagrid-column/

Modifying the Structures_DataGrid front page, constants, etc... is up to you.

3 - then rebuild the manual as usual

Beware that the XML may be broken, you many not be able to build the manual, 
if you have XML_Beautifier installed (observed with PhpDocumentor 1.3.0RC6
and XML_Beautifier 1.1).

III - Notes

1 - the PhpDocumentor manual states : 

    Although documentation parsed directly from source code is
    tremendously useful, it cannot stand on its own. In addition, truly
    useful in-code documentation must be succinct enough so that the
    code is not completely obscured by the documentation. External
    documentation is a must for a complete documentation
    solution. However, external documentation must be able to link to
    API source documentation to be useful. With a constantly changing API
    documentation, it is very easy for external documentation to become
    out of date. In addition, external documentation must be in a format
    that can be converted into other formats such as HTML, PDF and XML.

    phpDocumentor provides a simple and elegant solution to all
    of these problems. External documentation in DocBook format
    can be easily converted to other formats. Using inline tags,
    phpDocumentor can generate a consistent manual in many
    different formats by combining the output from parsing the
    source and parsing external documentation. The words you
    read at this moment are in a DocBook-based file located in
    tutorials/phpDocumentor/phpDocumentor.quickstart.pkg

This can be achieved with something like :
    @tutorial phpDocumentor.howto.pkg#using.command-line.output 
