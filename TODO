################################################################################
#                        Structures_DataGrid TODO File                         #
################################################################################


Remarks about this file : 
- each entry should be separated by a "-" line
- each entry should have a title formatted as :
  TODO <number> - <summary> (<pear user name>) - Priority: High|Medium|Low
- once an entry is fixed, I recommend not to remove it. Mark it as "Done" instead.

--------------------------------------------------------------------------------
TODO 1 - SQL sort expression support (olivierg) - Priority: Medium

Ensure that when one sets Column::orderBy with an SQL expression (like an
SQL function etc...)  the SQL based drivers properly pass this expression
to the backend

--------------------------------------------------------------------------------
TODO 2 - SQL sort expression / field name mapping (olivierg) - Priority: Medium

if Column::orderBy is an SQL expression then it does not make sense for
this expression to make the trip to and back from the browser. Let's
the take the following example :

$column->setOrderBy("IF(LOCATE('foo',bar),1,0)");

With the current implementation, this expression is likely to
be printed directly into the html links, with something like :
<a href="...?orderBy=IF%28LOCATE%28foo%2Cbar%29%2C1%2C0%29">

It might work, but it raises a security issue, because we can't properly
escape that string before including it into our SQL query.  In this
context, when one supplies a value with setOrderBy(), it should be
required to also have something set with setField()

Example : 
$column->setLabel("The Bar");
$column->setField("bar");
$column->setOrderBy("IF(LOCATE('foo',bar),1,0)");

Should produce links like : 
<a href="...?orderBy=bar">

And when generating SQL, this "bar" value should be mapped to the 
orderBy value : IF(LOCATE('foo',bar),1,0)
 
--------------------------------------------------------------------------------
TODO 3 - XML attributes set from the Column object (olivierg) - Priority: Medium

The HTML driver renders the Column::atribs, but attributes are also
valid with XML, and should also be rendered by the XML renderer.
 
--------------------------------------------------------------------------------
TODO 4 - Ensure protection against SQL injection (olivierg) - Priority: Medium

- Are orderBy, direction and page HTTP arguments properly escaped before
they are included in SQL queries ?
  
- Could we write security tests that try to perform SQL injection ?
  
--------------------------------------------------------------------------------
TODO 5 - Don't fetch data if it not needed (wiesemann) - Priority: Medium

- renderers like Pager or HTMLSortForm don't need all data: Pager needs
only the number of records, HTMLSortForm needs only the field names

- Olivier's (agreed and accepted) idea for this from a bug report:
<<<
In this regard, I think that
a mechanism similar to the DataSource "features" (hasFeature(),
setFeatures(), etc...) could be needed.
There could then be features like "renderLimits",
"renderContent" (both true by default) and the DataGrid would
"ask" with : 
if ($renderer->hasFeature('renderLimits')) {count the rows}
if ($renderer->hasFeature('renderContent')) {fetch the rows}
>>>

--------------------------------------------------------------------------------
TODO 6 - Predefined column formatters (olivierg) - Priority: Medium

There are common formatting needs such as date, numbers. These could be achieved
with predefined column formatters.

--------------------------------------------------------------------------------
TODO 7 - Using Datasources out of SDG (olivierg) - Priority: Medium

Document how to use the DataSource layer out of SDG, as an abstract way to fetch
tabular data from a variety of sources.

--------------------------------------------------------------------------------
TODO 8 - "Custom renderers" manual page (olivierg) - Priority: Medium

This manual page is not finished.

--------------------------------------------------------------------------------
TODO 9 - Debugging (?) - Priority: Medium

Add some debugging possibilities, e.g. similar to the way DBDO does it.

--------------------------------------------------------------------------------
TODO 10 - Remove constants (?) - Priority: High

Remove the new constants for Renderers and DataSources (STRUCTURES_DATAGRID_*),
use strings insteads. To be discussed: Renderer file for HTML_Table is named
HTMLTable.php, 'HTML_Table' as parameter for render()/fill() would be more
precise and consistent. Similar for DataObject.php (=> DB_DataObject),
DBTable.php (=> DB_Table), Console.php (=> Console_Table) and others.

--------------------------------------------------------------------------------
TODO 11 - Allow access to the record set (?) - Priority: Medium

Users should be able to access the record set. This can be achieved either by
a new method in the core class or by a new (rather trivial) array renderer.
(Idea/request from Gregor Gramlich)

--------------------------------------------------------------------------------
TODO 12 - Let renderers access Column objects directly (olivierg) - Priority: High

When refactoring the rendering layer, I thought Column objects were like Records
objects: a waste of memory.

But I now realize they're very useful, and the $_columns property is now what wastes
memory by duplicating all of the informations contained in $_columnObjects.

Additionally, such options as columnAttributes are redundant with the informations
contained in Column objects, etc...

So we should change this ASAP, so that it does not cause too many BC breaks for
people who are writing their own renderers.

I propose to remove the $_columnObjects property, and put Column objects references
directly into $_columns

